
module shift_register (
  input wire clk,
  input wire rst,
  input wire shift_en,
  input wire [3:0] data_in,
  output wire [3:0] data_out
);

  reg [3:0] register_data;

  always @(posedge clk or posedge rst) begin
    if (rst) begin
      register_data <= 4'b0000; 
    end else if (shift_en) begin
      register_data <= {register_data[2:0], data_in};
    end
  end

  assign data_out = register_data;

endmodule

// testbench

module tb_shift_register;

  reg clk, rst, shift_en;
  reg [3:0] data_in;
  wire [3:0] data_out;

 
  shift_register uut (
    .clk(clk),
    .rst(rst),
    .shift_en(shift_en),
    .data_in(data_in),
    .data_out(data_out)
  );

  
  always begin
    #5 clk = ~clk; 
  end

  initial begin
    clk = 0;
    rst = 1; 
    shift_en = 0;
    data_in = 4'b1010;

    #10 rst = 0;
    #10 shift_en = 1; data_in = 4'b1101; 
    #10 shift_en = 1; data_in = 4'b0011; 

    #50 $stop; 
  end

endmodule